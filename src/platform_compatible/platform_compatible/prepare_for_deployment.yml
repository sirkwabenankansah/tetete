# 2024
#
# This playbook ensures the platform ansible inventory is prepared for deploying
# a workload
# It was copied from amtrak_ansible
- name: Prompt for, validate, and store the customer/project name
  hosts: all, localhost # Ensure that this task always runs
  tags: always
  run_once: true # But only once
  gather_facts: false
  vars: # Overridable run params
    host_limit_filter: "&vpcs" # Can be specified externally
    limited_hosts_var: target_hosts # Name of var to store target host list
    require_single_target: yes
  vars_prompt: # These can be specified on the command line with `-e target_project=customerXXXX`
    - name: target_project
      prompt: Enter the target project/workload name (e.g. customer0000)
      private: no
  tasks:
    - name: Validate and store the chosen target_project
      delegate_to: localhost # Workaround: https://github.com/ansible/ansible/issues/62220
      block:
        - name: Is this a valid project name?
          assert:
            that: target_project in groups.keys()
            msg: The project must exist in the inventory
        - name: Is the target location for the project vars valid?
          block:
            - name: Check target path
              delegate_to: localhost # Redundant with workaround, but explicit
              stat:
                path: "{{ ansible_base_path }}/environments/{{ env }}/group_vars/{{ target_project }}/"
              register: project_dir_stat
            - name: Must be a directory
              assert:
                that: project_dir_stat.stat.exists and project_dir_stat.stat.isdir
        - name: Set hostvars.localhost.target_project for easy reference later
          # The vars_prompt vars do not survive beyond the current play.
          # Explicitly, intentionally saving to localhost so that we can find it later
          delegate_to: localhost
          delegate_facts: true
          set_fact:
            # use default() to stop lazy eval / recursive loop
            target_project: '{{ target_project | default("") }}'
    - name: Save targeted hosts
      set_fact:
        targeted_hosts: '{{ lookup("inventory_hostnames", full_limit_filter) }}'
      vars:
        full_limit_filter: '{{ target_project + (host_limit_filter | ternary(":" + host_limit_filter, "")) }}'
    - name: Ensure targeted hosts are more than one
      assert:
        that:
          - targeted_hosts | length > 0
        fail_msg: Unable to find a valid host. This indicates the pseudo_hosts.yml is missing.
    - name: Set hostvars.localhost.{{ limited_hosts_var }}, for easy reference later
      delegate_to: localhost
      delegate_facts: yes
      set_fact:
        "{{ limited_hosts_var }}": '{{ targeted_hosts.split(",") }}'
    - name: Limited target hosts
      debug:
        var: '{{ "hostvars.localhost." + limited_hosts_var }}'
    - name: For safety, ensure we target a single host at a time
      assert:
        that: hostvars.localhost[limited_hosts_var] | length == 1
        msg: |
          You must limit this playbook to one target host.
          Use `require_single_target=no` to override.
      when: require_single_target | bool

- name: Update existing configurations synced between the platform and workloads
  hosts: '{{ hostvars.localhost.target_hosts | join(",") }}'
  gather_facts: no
  vars:
    target_project: "{{ hostvars.localhost.target_project }}"
    required_vars:
      - cluster_domain
  tasks:
    - name: Import existing configurations synced between the platform and workloads
      include_vars:
        file: "platform.yml"
        name: platform_info
    - name: Prompt for required variables
      when: var_name not in platform_info
      pause:
        prompt: "Provide a value for {{ var_name }}"
      loop: "{{ required_vars }}"
      loop_control:
        loop_var: var_name
      register: required_vars_prompt
    - name: Create new variable entries
      when: not ("skipped" in entry and entry.skipped)
      set_fact:
        "{{ entry.var_name }}": "{{ entry.user_input }}"
      loop_control:
        loop_var: entry
      loop: "{{ required_vars_prompt.results }}"
    - name: Setup platform inventory for the workload
      vars:
        vars_path: "{{ ansible_base_path }}/environments/{{ env }}/group_vars/{{ target_project }}/"
      copy:
        src: 02_infrastructure_definition.yml
        dest: "{{ vars_path }}/02_infrastructure_definition.yml"
        mode: "0440"
        unsafe_writes: true
    - name: Create new info to merge with existing
      set_fact:
        platform_info: "{{ platform_info | default({}) | combine(new_info, recursive=true) }}"
      vars:
        new_info:
          platform_account_number: "{{ master_account_number }}"
          env: "{{ env }}"
          account_number: "{{ account_number }}"
          workload_id: "{{ WORKLOAD_ID }}"
          name: "{{ VPC_NAME }}"
          initial_password: "{{ initial_password }}"
          cluster_domain: "{{ cluster_domain | default(platform_info.cluster_domain) }}"
    # This task ensures required variables are defined in the platform_info dict
    # This task is to ensure new variables are added to the right places in the code
    # If this task fails then the variable needs to be added to the task that updates
    # the platform_info variable. Should be the previous task.
    - name: Make sure required_vars were defined
      when: var_name not in platform_info
      fail:
        msg: Failed to update the code for putting {{ var_name }} into platform_info
      loop: "{{ required_vars }}"
      loop_control:
        loop_var: var_name
    # This task ensures the required variables have a non-empty value
    - name: Make sure required_vars were given values
      when: platform_info[var_name] | length == 0
      fail:
        msg: Invalid value for {{ var_name }}, please provide a valid value
      loop: "{{ required_vars }}"
      loop_control:
        loop_var: var_name
    - name: Save information
      vars:
        yaml_output_style: '"' # this ensures passwords are wrapped in quotes
      copy:
        dest: "vars/platform.yml"
        content: "{{ platform_info | to_nice_yaml(indent=2, explicit_start=True, default_sytle=yaml_output_style) }}"
        mode: "0640"